package {{package}};

{{#imports}}import {{import}};
{{/imports}}
import com.pmovil.jsonapi.BeansInterface;
import com.pmovil.jsonapi.UnexpectedJsonException;
import java.util.Map;
import org.json.simple.JSONObject;

{{#models}}

{{#model}}{{#description}}
/**
 * {{description}}
 **/{{/description}}
public class {{classname}} {{#parent}}extends {{{parent}}}{{/parent}} implements BeansInterface {
  {{#vars}}{{#isEnum}}
  public enum {{datatypeWithEnum}} {
    {{#allowableValues}}{{#values}} {{.}}, {{/values}}{{/allowableValues}}
  };
  private {{{datatypeWithEnum}}} {{name}} = {{{defaultValue}}};{{/isEnum}}{{^isEnum}}
  private {{{datatype}}} {{name}} = {{{defaultValue}}};{{/isEnum}}{{/vars}}

  {{#vars}}
  /**{{#description}}
   * {{{description}}}{{/description}}{{#minimum}}
   * minimum: {{minimum}}{{/minimum}}{{#maximum}}
   * maximum: {{maximum}}{{/maximum}}
   **/
  public {{{datatypeWithEnum}}} {{getter}}() {
    return {{name}};
  }
  public void {{setter}}({{{datatypeWithEnum}}} {{name}}) {
    this.{{name}} = {{name}};
  }
  {{/vars}}
  @Override
  public String toString()  {
    return "class {{classname}} " + toJsonString();
  }
  
  public String toJsonString() {
        JSONObject jsonObject = new JSONObject();
        {{#vars}}jsonObject.put("{{name}}", {{name}});
        {{/vars}}
        return jsonObject.toJSONString();
  }

  @Override
  public void update(Map<String, Object> result, boolean cached) throws UnexpectedJsonException {
        {{#vars}}if (result.containsKey("{{baseName}}")) {{name}} = ({{{datatypeWithEnum}}})validate(result.get("{{baseName}}"), {{baseType}}.class);
        {{/vars}}
  }

  /**
   * Helper class to deal with types that are not what are supposed to be
   * 
   * @param obj
   * @param type
   * @return
   * @throws UnexpectedJsonException 
   */
    private Object validate(Object obj, Class type) throws UnexpectedJsonException {
        try {
            Object[] tmp = (Object[]) obj;
            return obj;
        } catch (ClassCastException e) {
            // not an array, proceed
        }
        if ("Integer".equals(type.getSimpleName())) {
            if (!(obj instanceof Integer)) {
                try {
                    double parsed = Double.parseDouble(obj.toString());
                    if (parsed == (int)parsed) {
                        return (int)parsed;
                    } else {
                        // not an integer
                        throw new UnexpectedJsonException();
                    }
                } catch (NumberFormatException e) {
                    // not a number
                    throw new UnexpectedJsonException();
                }
            }
        }
        if ("Long".equals(type.getSimpleName())) {
            if (!(obj instanceof Long)) {
                try {
                    double parsed = Double.parseDouble(obj.toString());
                    if (parsed == (long)parsed) {
                        return (long)parsed;
                    } else {
                        // not an integer
                        throw new UnexpectedJsonException();
                    }
                } catch (NumberFormatException e) {
                    // not a number
                    throw new UnexpectedJsonException();
                }
            }
        }
        if (type.isEnum()) {
            try {
                return Enum.valueOf(type, obj.toString());
            } catch (Exception ex) {
                // not a constant from this enum
                throw new UnexpectedJsonException();
            }
        }
        return obj;
    }

}
{{/model}}
{{/models}}
